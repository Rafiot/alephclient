# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from alephclient.services import common_pb2 as alephclient_dot_services_dot_common__pb2
from alephclient.services import geoextract_pb2 as alephclient_dot_services_dot_geoextract__pb2


class GeoExtractStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ExtractCountries = channel.stream_unary(
        '/alephservices.GeoExtract/ExtractCountries',
        request_serializer=alephclient_dot_services_dot_common__pb2.Text.SerializeToString,
        response_deserializer=alephclient_dot_services_dot_geoextract__pb2.CountryTags.FromString,
        )


class GeoExtractServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ExtractCountries(self, request_iterator, context):
    """Extract entities from the given text.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_GeoExtractServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ExtractCountries': grpc.stream_unary_rpc_method_handler(
          servicer.ExtractCountries,
          request_deserializer=alephclient_dot_services_dot_common__pb2.Text.FromString,
          response_serializer=alephclient_dot_services_dot_geoextract__pb2.CountryTags.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'alephservices.GeoExtract', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
